variables:
  DEBIAN_FRONTEND: noninteractive
  DOCKER_DRIVER: overlay2
  ARTIFACTS_DIR: "$CI_PROJECT_DIR/dist"
  # Set up variables for pushing the generated tags
  # REPO_URL (set this up  in project->settings->CI/CD settings->Secret variables)
  # e.g. git.cells.es
  DEPLOY_GIT_REPO: "$REPO_URL/$CI_PROJECT_PATH.git"
  # ALBA HACK:
  GIT_SSL_NO_VERIFY: 'true'
  DEBFULLNAME: "CI Boot"
  # DEBEMAIL (set this up  in project->settings->CI/CD settings->Secret variables)
  DEBEMAIL: "$DEBEMAIL"


stages:
  - ups_build
  - pkg_build
  - pkg_test
  - pkg_push
  - deploy_staging
  - deploy_production


prepare_debrepo:
  image: cmft/debpack-ci
  stage: ups_build
  artifacts:
    expire_in: 1 day
    name: "$CI_JOB_NAME"
    paths:
      - ${ARTIFACTS_DIR}/tmprepo

  script:
    # create & configure the temporary repo
    - git clone . ${ARTIFACTS_DIR}/tmprepo
    - git push ${ARTIFACTS_DIR}/tmprepo remotes/origin/debian/stretch:refs/heads/debian/stretch
    - if [[ $CI_COMMIT_REF_NAME =~ ^debian/.*$ ]]; 
        then echo "We  are already in a debian branch. Nothing more to do." ;
        exit 0;
        fi
    - cd ${ARTIFACTS_DIR}/tmprepo
    - git checkout -b upstream
    # tag upstream
    # TODO it assumes that setup.py returns the version (modify this line if not)
    - UPVERSION=`python setup.py --version`+git`date +%Y%m%d`.$CI_PIPELINE_ID.`git rev-parse --short=6 upstream`
    - git tag upstream/$UPVERSION 
    # merge and update debian/stretch branch
    - git checkout debian/stretch
    - git merge -X theirs --no-ff --no-edit -m "Merge upstream/$UPVERSION into debian/stretch" 
        -m "[ci skip]" upstream/$UPVERSION
    - CH_VERSION=`dpkg-parsechangelog --show-field Version`
    - if [[ $CH_VERSION =~ $UPVERSION ]]; then DEB_BNUMBER=$((`echo "$CH_VERSION" | sed 's/.*+//'` + 1)); else DEB_BNUMBER=1; fi
    #- DEB_VERSION=`cat /etc/debian_version`
    #- BPO_NUM=${DEB_VERSION/.*}
    - BPO_NUM=9
    - gbp dch --commit --commit-msg="Update changelog for %(version)s release [ci skip]" 
        --spawn-editor=never --debian-branch=debian/stretch --upstream-branch=upstream 
        --release  --distribution=stretch-backports --new-version=$UPVERSION-0~bpo$BPO_NUM+0~alba+$DEB_BNUMBER 
        --git-log='--first-parent' 
    - cat debian/changelog
  except:
    - tags


build_package_stretch:
  image: debian:stretch
  # If deps. build pkgs are not officially available use our alba image instead
  # image: dockerrg.cells.es/debpack-ci:latest 
  stage: pkg_build
  dependencies: 
    - prepare_debrepo
  artifacts:
    expire_in: 1 day
    name: "$CI_JOB_NAME"
    paths:
      - ${ARTIFACTS_DIR}/stretch
      - ${ARTIFACTS_DIR}/tmprepo
  before_script:
    - apt-get update
    - apt-get install eatmydata -y
    - eatmydata apt-get install git-buildpackage -y
  script:
    - cd ${ARTIFACTS_DIR}/tmprepo
    - git checkout debian/stretch
    - eatmydata apt-get build-dep -y .
    - DEB_BUILD_OPTIONS=nocheck gbp buildpackage --git-tag --git-debian-branch=debian/stretch 
        --git-export-dir=${ARTIFACTS_DIR}/stretch -us -uc
  except:
    - tags


lintian_stretch:
  image: cmft/debpack-ci
  stage: pkg_test
  dependencies: 
    - build_package_stretch
  before_script:
    - apt-get update && apt-get install lintian -y --no-install-recommends
  script:
    - lintian -iI --suppress-tags backports-upload-has-incorrect-version-number,backports-changes-missing,changelog-should-mention-nmu ${ARTIFACTS_DIR}/stretch/*.changes 
  allow_failure: true
  except:
    - tags
    

push_to_pkg_repo:
  image: alpine:latest
  stage: pkg_push
  dependencies: 
    - build_package_stretch
  before_script:
    # prior to uploading, push the repo changes
    - apk update && apk add git openssh-client
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_DEBPACK_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    #- echo -e $SSH_DEBPACK_PRIVATE_KEY | ssh-add - > /dev/null
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan $REPO_URL >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    - cd ${ARTIFACTS_DIR}/tmprepo
    - git remote add ori_repo git@$REPO_URL:$CI_PROJECT_PATH.git
    - git push ori_repo debian/stretch:debian/stretch
    - git push ori_repo --tags 
  when: manual
  allow_failure: false
  except:
    - tags

###
# Only for internal ALBA project 
###

upload_to_staging:
  image: dockerrg.cells.es/debpack-ci:latest
  stage: deploy_staging
  script:
    - upload2aptly "aptly:$APTLY_PASS" "deb9_staging" ${ARTIFACTS_DIR}/stretch/*.changes
  except:
    - tags
  only:
    variables:
      - $REPO_URL == "git.cells.es"

promote_to_production:
  image: dockerrg.cells.es/debpack-ci:latest
  stage: deploy_production
  script:
    - movePackage  "aptly:$APTLY_PASS" "deb9_staging" "deb9_production" ${ARTIFACTS_DIR}/stretch/*.changes
  when: manual
  except:
    - tags
  only:
    variables:
      - $REPO_URL == "git.cells.es"


